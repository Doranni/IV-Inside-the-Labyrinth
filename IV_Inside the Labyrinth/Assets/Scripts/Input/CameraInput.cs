//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Input/CameraInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraInput"",
    ""maps"": [
        {
            ""name"": ""Camera"",
            ""id"": ""0f1f74c0-cf8b-4605-89fd-3d5c06616c4b"",
            ""actions"": [
                {
                    ""name"": ""LookAt"",
                    ""type"": ""Value"",
                    ""id"": ""f3326d29-15f2-457b-9ec1-73c2ab0e9980"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""Clamp(min=-1,max=1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b72326fb-bb79-4823-bb6a-b5d5208f635b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FirstViewToggle"",
                    ""type"": ""Button"",
                    ""id"": ""a09740ec-fa6a-4964-9dfb-de9ee8eff498"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MapViewToggle"",
                    ""type"": ""Button"",
                    ""id"": ""48b6a2d5-a231-4a19-8553-80258d9726e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StartRotation"",
                    ""type"": ""Button"",
                    ""id"": ""22884006-4810-4148-9336-66d5ca5082e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e6ac0c2c-c146-476d-bf7f-b4ac5815bde6"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""LookAt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""991fac23-6a92-4c79-a37b-b2d615d7e893"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5327bef-5927-4a72-8218-c54699b49e46"",
                    ""path"": ""<Keyboard>/#(V)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstViewToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e317c65-61be-41eb-87e0-3c2f32414f3f"",
                    ""path"": ""<Keyboard>/#(M)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MapViewToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""43b7b867-8022-4ad8-aea4-8546a71aa98d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_LookAt = m_Camera.FindAction("LookAt", throwIfNotFound: true);
        m_Camera_Zoom = m_Camera.FindAction("Zoom", throwIfNotFound: true);
        m_Camera_FirstViewToggle = m_Camera.FindAction("FirstViewToggle", throwIfNotFound: true);
        m_Camera_MapViewToggle = m_Camera.FindAction("MapViewToggle", throwIfNotFound: true);
        m_Camera_StartRotation = m_Camera.FindAction("StartRotation", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Camera
    private readonly InputActionMap m_Camera;
    private ICameraActions m_CameraActionsCallbackInterface;
    private readonly InputAction m_Camera_LookAt;
    private readonly InputAction m_Camera_Zoom;
    private readonly InputAction m_Camera_FirstViewToggle;
    private readonly InputAction m_Camera_MapViewToggle;
    private readonly InputAction m_Camera_StartRotation;
    public struct CameraActions
    {
        private @CameraInput m_Wrapper;
        public CameraActions(@CameraInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @LookAt => m_Wrapper.m_Camera_LookAt;
        public InputAction @Zoom => m_Wrapper.m_Camera_Zoom;
        public InputAction @FirstViewToggle => m_Wrapper.m_Camera_FirstViewToggle;
        public InputAction @MapViewToggle => m_Wrapper.m_Camera_MapViewToggle;
        public InputAction @StartRotation => m_Wrapper.m_Camera_StartRotation;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void SetCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterface != null)
            {
                @LookAt.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnLookAt;
                @LookAt.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnLookAt;
                @LookAt.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnLookAt;
                @Zoom.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoom;
                @Zoom.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoom;
                @Zoom.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoom;
                @FirstViewToggle.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnFirstViewToggle;
                @FirstViewToggle.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnFirstViewToggle;
                @FirstViewToggle.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnFirstViewToggle;
                @MapViewToggle.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnMapViewToggle;
                @MapViewToggle.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnMapViewToggle;
                @MapViewToggle.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnMapViewToggle;
                @StartRotation.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnStartRotation;
                @StartRotation.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnStartRotation;
                @StartRotation.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnStartRotation;
            }
            m_Wrapper.m_CameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LookAt.started += instance.OnLookAt;
                @LookAt.performed += instance.OnLookAt;
                @LookAt.canceled += instance.OnLookAt;
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
                @FirstViewToggle.started += instance.OnFirstViewToggle;
                @FirstViewToggle.performed += instance.OnFirstViewToggle;
                @FirstViewToggle.canceled += instance.OnFirstViewToggle;
                @MapViewToggle.started += instance.OnMapViewToggle;
                @MapViewToggle.performed += instance.OnMapViewToggle;
                @MapViewToggle.canceled += instance.OnMapViewToggle;
                @StartRotation.started += instance.OnStartRotation;
                @StartRotation.performed += instance.OnStartRotation;
                @StartRotation.canceled += instance.OnStartRotation;
            }
        }
    }
    public CameraActions @Camera => new CameraActions(this);
    public interface ICameraActions
    {
        void OnLookAt(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
        void OnFirstViewToggle(InputAction.CallbackContext context);
        void OnMapViewToggle(InputAction.CallbackContext context);
        void OnStartRotation(InputAction.CallbackContext context);
    }
}
